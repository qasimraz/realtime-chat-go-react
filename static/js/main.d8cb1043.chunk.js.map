{"version":3,"sources":["api/index.js","components/Header/Header.jsx","components/Message/index.js","components/Message/Message.jsx","components/ChatHistory/ChatHistory.jsx","components/ChatHistory/index.js","components/ChatInput/ChatInput.jsx","components/ChatInput/index.js","App.js","reportWebVitals.js","index.js"],"names":["socket","WebSocket","Header","className","Message","props","temp","JSON","parse","message","state","this","body","Component","ChatHistory","console","log","chatHistory","messages","map","msg","data","ChatInput","onKeyDown","send","autoFocus","placeholder","App","cb","setState","prevState","onopen","onmessage","onclose","event","onerror","error","keyCode","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kTAAIA,G,MAAS,IAAIC,UAAU,iD,eCSZC,EANA,kBACX,qBAAKC,UAAU,SAAf,SACI,uDCHOC,G,8DCCX,WAAYC,GAAQ,IAAD,sBACf,cAAMA,GACN,IAAIC,EAAOC,KAAKC,MAAM,EAAKH,MAAMI,SAFlB,OAGf,EAAKC,MAAQ,CACTD,QAASH,GAJE,E,0CASnB,WACI,OAAO,qBAAKH,UAAU,UAAf,SAA0BQ,KAAKD,MAAMD,QAAQG,W,GAXtCC,cCEhBC,E,4JACF,WACIC,QAAQC,IAAIL,KAAKN,MAAMY,aACvB,IAAMC,EAAWP,KAAKN,MAAMY,YAAYE,KAAI,SAAAC,GAAG,OAAI,cAAC,EAAD,CAASX,QAASW,EAAIC,UAEzE,OACI,sBAAKlB,UAAU,cAAf,UACI,+CACCe,S,GARSL,aCFXC,EDgBAA,EEfTQ,G,kKACF,WACI,OACI,qBAAKnB,UAAU,YAAf,SACI,uBAAOoB,UAAWZ,KAAKN,MAAMmB,KAAMC,WAAS,EAACC,YAAY,8B,GAJjDb,cCDTS,EDWAA,EE+BAK,E,kDAnCX,WAAYtB,GAAQ,IAAD,8BACf,cAAMA,IACDK,MAAQ,CACTO,YAAa,IAHF,E,qDAOnB,WAAqB,IRdXW,EQcU,ORdVA,EQeE,SAACR,GACLL,QAAQC,IAAI,eACZ,EAAKa,UAAS,SAAAC,GAAS,MAAK,CACxBb,YAAY,GAAD,mBAAM,EAAKP,MAAMO,aAAjB,CAA8BG,QAE7CL,QAAQC,IAAI,EAAKN,QRnBzBK,QAAQC,IAAI,2BAEZhB,EAAO+B,OAAS,WACZhB,QAAQC,IAAI,kCAGhBhB,EAAOgC,UAAY,SAAAZ,GACfL,QAAQC,IAAII,GACZQ,EAAGR,IAGPpB,EAAOiC,QAAU,SAAAC,GACbnB,QAAQC,IAAI,6BAA8BkB,IAG9ClC,EAAOmC,QAAU,SAAAC,GACbrB,QAAQC,IAAI,iBAAkBoB,M,kBQOlC,SAAKF,GRHK,IAAAd,EQIgB,KAAlBc,EAAMG,URJJjB,EQKMc,EAAMI,OAAOC,MRJ7BxB,QAAQC,IAAI,gBAAiBI,GAC7BpB,EAAOwB,KAAKJ,GQIJc,EAAMI,OAAOC,MAAQ,M,oBAI7B,WACI,OACI,sBAAKpC,UAAU,MAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAac,YAAaN,KAAKD,MAAMO,cACrC,cAAC,EAAD,CAAWO,KAAMb,KAAKa,c,GA9BpBX,aCIH2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d8cb1043.chunk.js","sourcesContent":["var socket = new WebSocket(\"ws://realtime-chat-go-react.herokuapp.com/ws\");\r\n\r\nlet connect = cb => {\r\n    console.log(\"Attempting to connect..\");\r\n\r\n    socket.onopen = () => {\r\n        console.log(\"Socket Successfully connected\");\r\n    };\r\n\r\n    socket.onmessage = msg => {\r\n        console.log(msg);\r\n        cb(msg);\r\n    };\r\n\r\n    socket.onclose = event => {\r\n        console.log(\"Socket Connection Closed: \", event);\r\n    };\r\n\r\n    socket.onerror = error => {\r\n        console.log(\"Socket Error: \", error);\r\n    };\r\n};\r\n\r\nlet sendMsg = msg => {\r\n    console.log(\"sending msg: \", msg);\r\n    socket.send(msg);\r\n};\r\n\r\nexport { connect, sendMsg };","import React from \"react\";\r\nimport \"./Header.scss\";\r\n\r\nconst Header = () => (\r\n    <div className=\"Header\">\r\n        <h2> Realtime Chat App</h2>\r\n    </div>\r\n);\r\n\r\nexport default Header;","import Message from \"./Message\";\r\n\r\nexport default Message;","import React, { Component } from \"react\";\r\nimport \"./Message.scss\";\r\nclass Message extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let temp = JSON.parse(this.props.message);\r\n        this.state = {\r\n            message: temp\r\n        };\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div className=\"Message\">{this.state.message.body}</div>\r\n    }\r\n}\r\n\r\nexport default Message;","import React, { Component } from \"react\";\r\nimport \"./ChatHistory.scss\";\r\nimport Message from \"../Message\";\r\n\r\nclass ChatHistory extends Component {\r\n    render() {\r\n        console.log(this.props.chatHistory)\r\n        const messages = this.props.chatHistory.map(msg => <Message message={msg.data} />);\r\n\r\n        return (\r\n            <div className=\"ChatHistory\">\r\n                <h2> Chat History</h2>\r\n                {messages}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatHistory;","import ChatHistory from \"./ChatHistory\";\r\n\r\nexport default ChatHistory","import React, { Component } from \"react\";\r\nimport \"./ChatInput.scss\"\r\n\r\nclass ChatInput extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"ChatInput\">\r\n                <input onKeyDown={this.props.send} autoFocus placeholder=\"Type message here..\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatInput","import ChatInput from \"./ChatInput\";\r\n\r\nexport default ChatInput;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { connect, sendMsg } from \"./api\";\nimport Header from \"./components/Header/Header\"\nimport ChatHistory from \"./components/ChatHistory\";\nimport ChatInput from \"./components/ChatInput\";\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            chatHistory: []\n        }\n    }\n\n    componentDidMount() {\n        connect((msg) => {\n            console.log(\"New Message\")\n            this.setState(prevState => ({\n                chatHistory: [...this.state.chatHistory, msg]\n            }))\n            console.log(this.state)\n        })\n    }\n\n    send(event) {\n        if (event.keyCode === 13) {\n            sendMsg(event.target.value);\n            event.target.value = \"\";\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header />\n                <ChatHistory chatHistory={this.state.chatHistory} />\n                <ChatInput send={this.send} />\n            </div>\n        );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}